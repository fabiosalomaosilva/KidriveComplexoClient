@page "/setores/list"
@attribute [Authorize]

@using System.Net.Http.Json
@inject HttpClient httpClient
@inject IChangeService ChangeService
@inject NavigationManager navigation
@inject IDialogService DialogService
@inject IOptionsModal OptionsModal

@if (Carregando == true)
{
    <Loading />
}
else
{
    <h1 style="margin-bottom:10px;margin-left:5px;font-weight:400;">Setores</h1>
    <MudTable Items="@setores" Dense="true" Hover="true" RowsPerPage="15" Bordered="false" Striped="true" Filter="new Func<Setor,bool>(FilterFunc)" @bind-SelectedItem="selectedItem" FixedHeader="false">
        <ToolBarContent>
            <MudFab Icon="@Icons.Material.Filled.Add" DisableElevation="true" Size="Size.Small" IconSize="Size.Medium" Color="Color.Default" OnClick="@Add" Class="mr-3 mt-3"></MudFab>
            <MudFab Icon="@Icons.Material.Filled.Refresh" DisableElevation="true" Size="Size.Small" IconSize="Size.Medium" Color="Color.Default" OnClick="@Refresh" Class="mr-3 mt-3"></MudFab>
            <MudFab Icon="@Icons.Material.Filled.Print" DisableElevation="true" Size="Size.Small" IconSize="Size.Medium" Color="Color.Default" Class="mr-3 mt-3"></MudFab>
            <MudFab Icon="@Icons.Material.Filled.PictureAsPdf" DisableElevation="true" Size="Size.Small" IconSize="Size.Medium" Color="Color.Default" Class="mr-3 mt-3"></MudFab>

            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Pesquisa" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Immediate="true" Clearable="true" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Nome</MudTh>
            <MudTh>Ações</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Setor">@context.nome</MudTd>
            <MudTd DataLabel="Ações" Style="width:100px;">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => Edit(context.id))"></MudIconButton>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="Delete"></MudIconButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Linhas por página" InfoFormat="{first_item} - {last_item} de {all_items}" />
        </PagerContent>
    </MudTable>
}
<h3>@selectedItem.nome</h3>


@code {
    private bool Carregando = true;
    private string searchString = "";
    private Setor selectedItem = new Setor();
    private HashSet<Setor> selectedItems = new HashSet<Setor>();

    private IEnumerable<Setor> setores = new List<Setor>();
    [CascadingParameter] IModalService Modal { get; set; }

    protected override void OnInitialized()
    {
        Refresh();
        ChangeService.OnChange += OnChange;
    }

    private void OnChange()
    {
        Refresh();
    }

    private bool FilterFunc(Setor element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.nome.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.nome}".Contains(searchString))
            return true;
        return false;
    }

    async void Refresh()
    {
        var lista = await httpClient.GetFromJsonAsync<List<Setor>>("/api/setores");
        setores = lista.OrderBy(p => p.nome);
        Carregando = false;
        StateHasChanged();
    }
    void Add()
    {
        navigation.NavigateTo($"/setores/add");
    }
    void Edit(string id)
    {
        navigation.NavigateTo($"/setores/add/{id}");
    }
    void Delete()
    {
        Modal.Show<AddSetor>("", OptionsModal.HideHeader());
    }
}
